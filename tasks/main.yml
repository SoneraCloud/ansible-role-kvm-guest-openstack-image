---
# We first need to get the machine ready for deployment
# Install ansible fedora deps
- name: Install python and deps for ansible modules
  raw: dnf install -y python2 python2-dnf libselinux-python
  when: ansible_distribution == 'Fedora'

# Install tools for KVM
- name: Install KVM and deps
  dnf: name="{{ item }}"
  with_items:
    - kvm
    - libvirt
    - libvirt-python
    - virt-manager
    - virt-install
    - genisoimage
  when: ansible_distribution == 'Fedora'

# Install tools for KVM
- name: Install KVM and deps
  yum: name={{ item }}
  with_items:
    - kvm
    - libvirt
    - libvirt-python
    - virt-manager
    - virt-install
    - genisoimage
  when: ansible_distribution == 'CentOS'

# Fetch a ready made OpenStack image.
# Read only, and owned by the qemu user.
# TODO: We backup the old versions, though of course this will break
#  copy-on-write stuff! We should fix this in some clever way so we keep
#  old versions or not do COW
- name: Download specified image
  get_url: url={{ image_url_prefix }}/{{ image_name }} dest={{ image_path}} mode=0400 owner=qemu backup=yes

# Build an ISO image to push to cloud-init
- name: create a local temp directory
  command: mktemp -d "{{ lookup('env', 'TMPDIR') | default('/tmp', true) }}/ansible.XXXX"
  register: temp_dir
  tags: image

- name: Change ownership of temp directory
  file: path={{ temp_dir.stdout }} state=directory mode=0700 owner=qemu group=qemu
  tags: image

- name: Generate cloud-init meta-data
  template: src={{ item }}.j2 dest={{ temp_dir.stdout }}/{{ item }} mode=0400 owner=qemu group=qemu
  with_items:
    - meta-data
    - user-data
  tags: image

- name: Generate ISO for cloud-init
  command: genisoimage -output {{ temp_dir.stdout }}/cloud-init.iso -volid \
           cidata -joliet -rock {{ temp_dir.stdout }}/user-data \
           {{ temp_dir.stdout }}/meta-data
  tags: image

# Actually do the KVM stuff
- name: Create a copy-on-write clone of the image
  command: qemu-img create -f qcow2 -o backing_file={{ image_path}}/{{ image_name }} {{ image_path}}/{{ guest_name }}.qcow2
  tags: image

- name: Define the VM though libvirt
  virt: name={{ guest_name }}
        command=define
        xml="{{ lookup('template', 'libvirt-guest.xml.j2') }}"
        uri=qemu:///system
  tags: image

- name: Start the VM
  virt: name={{ guest_name }}
        command=start
        state=running
        uri=qemu:///system
  tags: image

- name: Get VM facts
  virt: name={{ guest_name }}
        command=get_xml
        uri=qemu:///system
  register: guest_output
  tags: image,re

  #- debug: msg={{ guest_output.get_xml | regex_replace('.*mac address(.*)\n.*', '\\1') }}
- debug: msg={{ guest_output.get_xml | regex_replace('\n',' ') }}
  tags: image,re

   # Cleanup temp files? VM is still booting :-(
#- name: cleanup cloud-init files
#  file: path={{ temp_dir.stdout }} state=absent
#  tags: image
