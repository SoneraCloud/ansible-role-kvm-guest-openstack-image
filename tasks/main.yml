---
- name: gather hypervisor facts
  setup:
  delegate_to: "{{ hyper }}"

- include: prereqs.yml # Install KVM packages etc

- name: group hypervisors by distro
  group_by: key=os_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}
  delegate_to: "{{ hyper }}"

# Fetch a ready made OpenStack image.
# Read only, and owned by the qemu user.
# TODO: We backup the old versions, though of course this will break
#  copy-on-write stuff! We should fix this in some clever way so we keep
#  old versions or not do COW
- name: Download specified image
  get_url: url={{ image_url_prefix }}/{{ image_name }} dest={{ image_path}}/{{ image_name }} mode=0400 owner=qemu backup=yes
  delegate_to: "{{ hyper }}"
  become: yes

# Build an ISO image to push to cloud-init
- name: create a local temp directory
  command: mktemp -d "{{ lookup('env', 'TMPDIR') | default('/tmp', true) }}/ansible.XXXX"
  register: temp_dir
  delegate_to: "{{ hyper }}"

- name: Change ownership of temp directory
  file: path={{ temp_dir.stdout }} state=directory mode=0700 owner=qemu group=qemu
  become: yes
  delegate_to: "{{ hyper }}"

  # Define the guest early so we can skip a bunch of setup steps
- name: Define the VM though libvirt
  virt: name={{ inventory_hostname }}
        command=define
        xml="{{ lookup('template', 'libvirt-guest.xml.j2') }}"
        uri=qemu:///system
  register: defined
  become: yes
  delegate_to: "{{ hyper }}"

- debug: var=ansible_user_id
  become: yes
  delegate_to: "{{ hyper }}"

- name: Generate cloud-init meta-data
  template: src={{ item }}.j2 dest={{ temp_dir.stdout }}/{{ item }} mode=0400 owner=qemu group=qemu
  with_items:
    - meta-data
    - user-data
  become: yes
  delegate_to: "{{ hyper }}"
  when: defined | changed

- name: Generate ISO for cloud-init
  command: genisoimage -output {{ temp_dir.stdout }}/cloud-init.iso -volid \
           cidata -joliet -rock {{ temp_dir.stdout }}/user-data \
           {{ temp_dir.stdout }}/meta-data
  become: yes
  delegate_to: "{{ hyper }}"
  when: defined | changed

- name: Fix permissions of cloud-init iso
  file: name={{ temp_dir.stdout }}/cloud-init.iso mode=0400 owner=qemu group=qemu
  become: yes
  delegate_to: "{{ hyper }}"
  when: defined | changed

# Actually do the KVM stuff
- name: Create a copy-on-write clone of the image
  command: qemu-img create -f qcow2 -o backing_file={{ image_path}}/{{ image_name }} {{ image_path}}/{{ inventory_hostname }}.qcow2
  become: yes
  delegate_to: "{{ hyper }}"
  when: defined | changed

- name: set vm to autostart
  command: /bin/virsh autostart "{{ inventory_hostname }}"
  become: yes
  delegate_to: "{{ hyper }}"

- name: Start the VM
  virt: name={{ inventory_hostname }}
        command=start
        state=running
        uri=qemu:///system
  become: yes
  delegate_to: "{{ hyper }}"

- name: Get VM facts
  virt: name={{ inventory_hostname }}
        command=get_xml
        uri=qemu:///system
  register: guest_output
  become: yes
  delegate_to: "{{ hyper }}"

# If there is a better way to find this, I'd love to know.
- name: Find mac address of new guest
  set_fact: mac_address={{ guest_output.get_xml | regex_replace('\n','') | regex_replace('^<.*mac address=.([0-9:a-f]+).*$', '\\1') }}

- name: Get guest IP
  command: virsh net-dhcp-leases --network default --mac {{ mac_address }}
  changed_when: false
  register: net_dhcp_leases
  become: yes
  delegate_to: "{{ hyper }}"

- name: Parse guest IP and set fact
  set_fact: guest_ip={{ net_dhcp_leases.stdout_lines[-1] | regex_replace('^.* ipv4 +(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\/.*$','\\1') }}

  # Before we cleanup temp files we need the VM to boot and get the keys working
- name: Wait for VM to become available before continuing
  wait_for: port=22 host="{{ guest_ip }}" timeout=600
  delegate_to: "{{ hyper }}"

  # Force ansible to know the IP address of this host so it can connect 
  # This fixes things if you don't have the IP address in DNS or /etc/hosts.
- name: Set inventory_hostname to the new guest IP address
  set_fact: inventory_hostname={{ guest_ip }}

- name: Get facts from new vm (and wait for cloud-init ssh key deployment)
  setup:
  retries: 10
  delay: 60

- name: cleanup cloud-init files
  file: path={{ temp_dir.stdout }} state=absent
  become: yes
